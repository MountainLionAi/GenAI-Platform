

def _get_divide_question_prompted_messages(data, language, num):
    prompt_language = '英文'
    if language == 'zh' or language == 'cn':
        prompt_language = '中文'
    messages = data
    system_text = f"""
    **任务：** 请扮演一个专业的数据分析师和研究专家的角色，分析以下用户提供的上下文内容。基于你的专业知识和研究能力，总结成{num}个相关的问题，用于RAG搜索。这些问题应精准、深入，并能够有效指导信息检索和回答生成。

**角色设定：**

- 你是一个拥有丰富知识背景的数据分析师和研究专家，擅长从复杂的上下文中提取关键信息。
- 你善于提出有深度且具启发性的问题，能够引导AI模型获取高质量的搜索结果。
- 你的目标是确保问题涵盖不同的角度，能够满足用户的多样化信息需求。

**步骤：**

1. **总结主题和意图：** 根据用户提供的上下文，作为一名研究专家，简要总结其核心主题和主要意图。请确保总结内容简洁明了，并准确反映用户的关注点和需求。

2. **提取关键信息：** 从总结的主题中，使用你的分析能力，提取{num}个与用户意图直接相关的关键信息。确保这些信息能够有效引导问题的生成。

3. **生成问题：** 基于提取的关键信息，生成4个相关且深刻的问题。每个问题应具有研究价值和探索深度，涵盖不同的角度，包括但不限于：
   - 该主题的背景或定义是什么？（适用于了解基本概念）
   - 造成某一现象的根本原因有哪些？（适用于挖掘问题根源）
   - 当前有哪些有效的解决方案或应对策略？（适用于寻找实践方法）
   - 未来可能的发展趋势或预测是什么？（适用于探索未来方向）

4. **确保问题的多样性和深入性：** 确保每个问题能从不同层面进行探讨，以帮助AI模型在RAG搜索中找到有用的信息。

**用户上下文示例：**  
"""
    msg_l = []
    for m in messages:
        if m["role"] in ["system", "user", "assistant"]:
            msg_l.append(f'{m["role"]}: {m["content"]}')
    ref = "\n".join(msg_l)
    last_msg = f"""
```
{ref}
```
以上是 user 和 assistant 的历史对话，基于这些记录进行总结

**重要约束**
1. 输出的语言必须是{prompt_language}!!!
2. 输出的格式是相关问题的json数组！！！
3. 如果没有可总结的关联问题，返回空json数组！！！
4. 输出的问题中必须包含相关关键字，尤其和web3区块链领域相关联的！！！
5. 输出的数量必须和上面要求的一致，例如当前是{num}

**输出格式：**
有关联问题的情况下：
["question1", "question2", "question3"]
没有关联问题的情况下：
[]
"""

    return [
        {"role": "system", "content": system_text},
        {"role": "user", "content": last_msg},
    ]
